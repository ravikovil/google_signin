<script>
    // Dark, blue,light mode

    const getColorSchemeBtn = document.getElementById("DARK-MODE");

if (getColorSchemeBtn)
  getColorSchemeBtn.addEventListener("click", colorScheme);

function colorScheme() {
  function setTheme(theme) {
    const style = document.createElement("style");
    style.textContent = `
body {
font-family: Arial, sans-serif;
}

.dark-mode {
background-color: black;
color: #fff;
}

.light-mode {
background-color: #fff;
color: black;
}

.blue-mode {
background-color: #007bff;
color: #fff;
}

.light-mode * {
color: #000;
}

.blue-mode *[style*="background-color: rgb(255, 255, 255)"],
.blue-mode *[style*="background-color: #ffffff"],
.blue-mode *[style*="background-color: #fff"] {
color: #000 !important;
}

.dark-mode *[style*="background-color: rgb(255, 255, 255)"],
.dark-mode *[style*="background-color: #ffffff"],
.dark-mode *[style*="background-color: #fff"] {
color: black !important;
}
`;

    document.head.appendChild(style);
    document.body.className = theme;
    localStorage.setItem("theme", theme);
  }

  const colorModeIcon = document.querySelector(".div-block-26.mob img");
  const headerLogo = document.querySelector(
    ".header-content-wrapper.left img"
  );

  function toggleMode() {
    const currentTheme = localStorage.getItem("theme");
    let newTheme;

    if (currentTheme === "dark-mode") {
      newTheme = "light-mode";
      colorModeIcon.src = "../images/blue-mode.png";
      headerLogo.src = "../images/PAWPAL HOME LOGO BLACK.png";
    } else if (currentTheme === "light-mode") {
      newTheme = "blue-mode";
      headerLogo.src = "../images/PAWPAL-HOME-LOGO-V3-UPDATED.png";
      colorModeIcon.src = "../images/dark-mode.png";
    } else {
      newTheme = "dark-mode";
      headerLogo.src = "../images/PAWPAL-HOME-LOGO-V3-UPDATED.png";
      colorModeIcon.src = "../images/light-mode.png";
    }
    setTheme(newTheme);
  }

  const savedTheme = localStorage.getItem("theme");

  if (!savedTheme) {
    setTheme("dark-mode");
  } else {
    setTheme(savedTheme);
  }
  toggleMode();
}

// List of links to choose from
var linksArray = [
  "/demo-v-2-breeds/bernedoodle-demo-v-2",
  "/demo-v-2-breeds/english-springer-spaniel-demo-v-2",
  "/demo-v-2-breeds/dalmatian-demo-v-2",
  "/demo-v-2-breeds/german-shepherd-demo-v-2",
  "/demo-v-2-breeds/golden-retriever-demo-v-3",
  "/demo-v-2-breeds/rottweiler-demo-v-2",
];

// Function to pick a random link
function pickRandomLink() {
  var randomIndex = Math.floor(Math.random() * linksArray.length);
  var randomLink = linksArray[randomIndex];
  window.location.href = randomLink; // Redirects to the random link
}

// Add event listener to the button
document.addEventListener("DOMContentLoaded", function () {
  var randomButton = document.getElementById("randomButton"); // Make sure to assign the correct ID to your button
  if (randomButton) {
    randomButton.addEventListener("click", pickRandomLink);
  }
});

// extract link from bot result
function extractImageLink(message, timestamp, callback) {
  if (typeof message !== "string" || message.trim() === "") {
    return;
  }

  // extract string
  let index = message.indexOf(")");
  let resultText;
  if (index !== -1) {
    resultText = message.substring(index + 1);
  }

  const regex = /\((.*?)\)/;
  const match = message.match(regex);
  if (match && match.length > 1) {
    const imageLink = match[1];
    createCanvasImage(imageLink, timestamp, resultText);
    if (callback) callback(true);
  } else {
    if (callback) callback(false);
  }
}

// create canvas for image
function createCanvasImage(imageLink, timestamp, resultText) {
  const chatContainer = document.querySelector(".chat-container");
  const chatBubble = document.createElement("div");
  chatBubble.classList.add("chat-bubble1", "bot"); // Create canvas element
  const canvas = document.createElement("canvas");
  canvas.width = 300;
  canvas.height = 300;
  canvas.style.borderRadius = "15px";
  // Show loading indicator
  const loadingIndicator = document.createElement("div");
  loadingIndicator.style.cssText =
    "width:300px; height:300px;display:flex;justify-content:center; align-items:center;";
  loadingIndicator.textContent = "Loading";
  const image = document.createElement("img");
  image.style.width = "35px";
  image.src =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65caaf100d2e9c6e6c2df009_bubble.svg";
  loadingIndicator.appendChild(image);
  chatBubble.appendChild(loadingIndicator);
  const textSpan = document.createElement("span");
  textSpan.textContent = resultText;
  const ctx = canvas.getContext("2d");
  const img = new Image();
  img.src = imageLink;
  scrollToLatestMessage();

  img.onload = function () {
    loadingIndicator.remove();

    chatBubble.appendChild(canvas);
    chatBubble.appendChild(textSpan);
    chatBubble.appendChild(timestamp);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    scrollToLatestMessage();
  };
  chatContainer.appendChild(chatBubble);
  return;
}
function checkMessage(message) {
  const keywords = ["What", "When", "How", "Tell", "look up", "search"];
  const keywordsSeekingAttention = [
    "Look",
    "attention",
    "hear",
    "said",
    "important",
    "Listen",
    "share",
    "something",
    "happened",
    "talk",
    "need",
    "feeling",
    "reminds",
    "boring",
    "notice",
    "saying",
    "enough",
    "acknowledge",
    "left out",
    "validation",
  ];
  const keywordsHeardSomething = [
    "ask",
    "question",
    "heard",
    "overheard",
    "listened",
    "heard about",
  ];
  const shinyStars = ["Intelligent", "Awesome", "Good", "Smart"];
  const image = document.querySelector("#image-container img");
  const imageMob = document.querySelector(".div-block-14.mob img");
  const lowerCaseInput = message.toLowerCase();
  for (const keyword of keywords) {
    if (lowerCaseInput.includes(keyword.toLowerCase())) {
      const src = image.getAttribute("src");
      if (
        src !==
        "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f864934f182c1231128_Dog%20Glasses.gif"
      ) {
        image.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f864934f182c1231128_Dog%20Glasses.gif";
        image.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f864934f182c1231128_Dog%20Glasses.gif";
        imageMob.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f864934f182c1231128_Dog%20Glasses.gif";
        imageMob.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f864934f182c1231128_Dog%20Glasses.gif";
      }
      return true;
    }
  }
  for (const keyword of keywordsSeekingAttention) {
    if (lowerCaseInput.includes(keyword.toLowerCase())) {
      const src = image.getAttribute("src");
      if (
        src !==
        "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86957b2778aa70c183_seekingattention.gif"
      ) {
        image.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86957b2778aa70c183_seekingattention.gif";
        image.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86957b2778aa70c183_seekingattention.gif";
        imageMob.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86957b2778aa70c183_seekingattention.gif";
        imageMob.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86957b2778aa70c183_seekingattention.gif";
      }
      return true;
    }
  }

  for (const keyword of keywordsHeardSomething) {
    if (lowerCaseInput.includes(keyword.toLowerCase())) {
      const src = image.getAttribute("src");
      if (
        src !==
        "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif"
      ) {
        image.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
        image.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
        imageMob.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
        imageMob.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
      }
      return true;
    }
  }
  for (const keyword of shinyStars) {
    if (lowerCaseInput.includes(keyword.toLowerCase())) {
      const src = image.getAttribute("src");
      if (
        src !==
        "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86e843a6835fe3bf46_Shining.gif"
      ) {
        image.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86e843a6835fe3bf46_Shining.gif";
        image.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86e843a6835fe3bf46_Shining.gif";
        imageMob.srcset =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86e843a6835fe3bf46_Shining.gif";
        imageMob.src =
          "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f86e843a6835fe3bf46_Shining.gif";
      }
      return true;
    }
  }

  if (!message) {
    image.srcset =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
    image.src =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
    imageMob.srcset =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
    imageMob.src =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
  }

  return false;
}

// store conversation
function insertMsg(data) {
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");
  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: data,
    redirect: "follow",
  };

  fetch("https://api.pawpal.ai/api/v1/chat", requestOptions)
    .then((response) => response.text())
    .then((result) => {
      return;
    })
    .catch((error) => {
      throw error;
    });
}
// get login details
function getCookie(name) {
  const cookieValue = document.cookie.match(
    "(^|;)\\s*" + name + "\\s*=\\s*([^;]+)"
  );
  return cookieValue ? cookieValue.pop() : "";
}

// get breed id
function breedId() {
  const url = window.location.href;
  const parts = url.split("/");
  const breed = parts[parts.length - 1].split(".")[0];
  return breed;
}

var firstUserId = getCookie("userId");
var secondUserId = breedId();

// get chat conversation
function msg(sender, message, timestamp) {
  // Get all chat-bubble1 elements
  const chatBubbles = document.querySelectorAll(".chat-bubble1");

  // Initialize variables to store the last text and time for both user and bot
  let lastUserText = null;
  let lastUserTime = null;
  let lastBotText = null;
  let lastBotTime = null;

  // Iterate over each chat bubble
  chatBubbles.forEach((chatBubble) => {
    // Get the text content from the chat bubble
    const textContent = chatBubble?.textContent.trim();

    // Get the timestamp content from the chat bubble
    const timestamp = chatBubble
      .querySelector(".timestamp")
      ?.textContent?.trim();

    // Determine if it's from user or bot
    if (chatBubble?.classList?.contains("user")) {
      // Update last user text and time
      lastUserText = textContent;
      lastUserTime = timestamp;
    } else if (chatBubble?.classList?.contains("bot")) {
      // Update last bot text and time
      lastBotText = textContent;
      lastBotTime = timestamp;
    }
  });

  let conversation = [
    {
      from: firstUserId,
      to: secondUserId,
      time: lastUserTime,
      message: lastUserText,
    },
    {
      from: secondUserId,
      to: firstUserId,
      time: timestamp,
      message: message,
    },
  ];
  // Output the last text and time for both user and bot
  const data = JSON.stringify({
    firstUserId: firstUserId,
    secondUserId: secondUserId,
    date: new Date(),
    chat: [...conversation],
  });

  insertMsg(data);
}

// Function to scroll to the bottom of the chat container
function scrollToLatestMessage(delay = 0) {
  const chatContainer = document.querySelector(".chat-container");
  // Delay scrolling slightly to account for the height change
  setTimeout(() => {
    chatContainer.scrollTop = chatContainer.scrollHeight;
    chatContainer.scrollIntoView({ block: "end" });
  }, delay);
}

// Function to generate random ID
function getRandomId() {
  return Math.random().toString(36).substring(2, 10);
}

// Generate on page load
const userId = getRandomId();

// Function to post user's message to API
async function postMessageToAPI(message) {
  // For adding bubble when thinking bot by made ravi
  // started
  const chatContainer = document.querySelector(".chat-container");
  const bubble = document.createElement("div");
  bubble.classList.add("chat-bubble1");
  bubble.classList.add("bot");
  bubble.classList.add("bubble");
  const image = document.createElement("img");
  image.src =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65caaf100d2e9c6e6c2df009_bubble.svg";
  image.style.marginBottom = "2px";
  image.style.width = "30px";
  image.style.bottom = "unset";
  image.style.left = "unset";
  chatContainer.style.marginBottom = "5px";
  const imageBreed = document.querySelector("#image-container img");
  imageBreed.srcset =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87fb7b84bf6452c80b_Thinking.gif";
  bubble.appendChild(image);
  chatContainer.appendChild(bubble);
  scrollToLatestMessage();
  // end

  const result = await query(message);
  if (result?.message["out-2"]) {
    // remove bubble when get the result
    bubble.remove();
    imageBreed.srcset =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
    const { timestamp, timeString } = createTimestamp(); // Create a timestamp for all messages

    extractImageLink(result?.message["out-2"], timestamp, (res) => {
      var firstUserId = getCookie("userId");

      if (!res) {
        displayChatBubble("bot", result?.message["out-2"]);
        scrollToLatestMessage();
      } else if (firstUserId) {
        msg("bot", result?.message["out-2"], timeString);
      }
    });
  }
}
async function query(message) {
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");

  const raw = JSON.stringify({
    message: message,
  });

  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: raw,
    redirect: "follow",
  };

  return await fetch(
    "https://api.pawpal.ai/api/v1/pawpal-ai/v3",
    requestOptions
  )
    .then((response) => response.text())
    .then((result) => {
      return JSON.parse(result);
    });
}

// get data from db of user
function getOldData(callback) {
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");

  const raw = JSON.stringify({
    firstUserId: firstUserId,
    secondUserId: secondUserId,
  });

  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: raw,
    redirect: "follow",
  };

  fetch("https://api.pawpal.ai/api/v1/chat/list", requestOptions)
    .then((response) => response.text())
    .then((result) => {
      if (callback)
        callback(
          JSON.parse(result).result.length > 0
            ? JSON.parse(result).result[0].chat
            : []
        );
    })
    .catch((error) => console.error(error));
}
// create html conversation
async function conversationFromDb(callback) {
  getOldData(async (chatData) => {
    const chatContainer = document.querySelector(".chat-container");
    // Loop through the chat data
    chatData.forEach((chat) => {
      if (chat.from === firstUserId && chat.message) {
        const chatBubble = document.createElement("div");
        chatBubble.classList.add("chat-bubble1", "user");
        chatBubble.style.display = "flex";
        (chatBubble.style.flexDirection = "column"),
          (chatBubble.style.gap = "5px");
        const newMsg = chat.message.replace(chat.time, "").trim();
        const textSpan = document.createElement("span");
        textSpan.textContent = newMsg;
        chatBubble.appendChild(textSpan);

        const timestamp = document.createElement("span");
        timestamp.style.display = "flex";
        timestamp.style.justifyContent = "end";
        timestamp.textContent = chat.time;
        chatBubble.appendChild(timestamp);

        chatContainer.appendChild(chatBubble);
      } else if (chat.from === secondUserId && chat.message) {
        const newMsg = chat.message.replace(chat.time, "").trim();

        const timestamp = document.createElement("span");
        timestamp.style.display = "flex";
        timestamp.style.justifyContent = "end";
        timestamp.textContent = chat.time;
        extractImageLink(newMsg, timestamp, (res) => {
          if (!res) {
            const chatBubble = document.createElement("div");
            chatBubble.classList.add("chat-bubble1", "bot");
            chatBubble.style.display = "flex";
            (chatBubble.style.flexDirection = "column"),
              (chatBubble.style.gap = "5px");

            const textSpan = document.createElement("span");
            textSpan.textContent = newMsg;

            chatBubble.appendChild(textSpan);

            chatBubble.appendChild(timestamp);
            chatContainer.appendChild(chatBubble);
          }
        });
      }
    });
    await new Promise((resolve) => setTimeout(resolve, 0));

    if (callback) callback(chatData);
  });
}
// Function to display chat bubbles with live typing effect

async function displayChatBubble(sender, message) {
  const chatContainer = document.querySelector(".chat-container");
  const bubble = document.createElement("div");
  bubble.classList.add("chat-bubble1");
  const { timestamp, timeString } = createTimestamp(); // Create a timestamp for all messages

  if (sender === "user") {
    bubble.classList.add("user");
    bubble.innerHTML = message; // Display the message as is
    bubble.appendChild(timestamp); // Append the timestamp for user messages
    chatContainer.appendChild(bubble);
  } else if (sender === "bot") {
    if (firstUserId) {
      msg(sender, message, timeString);
    }
    bubble.classList.add("bot");
    chatContainer.appendChild(bubble);
    // Check if the message contains a link and replace it with an anchor tag
    // started
    const linkPattern = /\[(.*?)\]\s?\((.*?)\)/;
    if (linkPattern.test(message)) {
      const [fullMatch, linkText, linkUrl] = message.match(linkPattern);
      const linkElement = document.createElement("a");
      linkElement.href = linkUrl;
      linkElement.textContent = linkText;
      linkElement.target = "_blank"; // Open link in new tab
      message = message.replace(fullMatch, linkElement.outerHTML);
      liveTypeMessageWithLInk(bubble, message, timestamp);
    } else {
      liveTypeMessage(bubble, message, timestamp); // Pass the timestamp to the typing effect function
    }
    // end
  }
  scrollToLatestMessage();
}

// when bot return some link in result
// started
function liveTypeMessageWithLInk(element, message, timestamp) {
  let i = 0;
  const typingSpeed = 50; // milliseconds

  function typeChar() {
    scrollToLatestMessage();
    if (i < message.length) {
      if (message.charAt(i) === "<") {
        // Check if the current character is part of an HTML tag
        let endIndex = message.indexOf(">", i); // Find the closing bracket of the tag
        if (endIndex !== -1) {
          element.innerHTML += message.substring(i, endIndex + 1);
          i = endIndex + 1; // Move the index to after the closing bracket
        } else {
          // If closing bracket not found, treat it as a regular character
          element.innerHTML += message.charAt(i);
          i++;
        }
      } else {
        element.innerHTML += message.charAt(i);
        i++;
      }
      scrollToLatestMessage();

      setTimeout(typeChar, typingSpeed);
    } else {
      var containers = document.getElementsByClassName("chat-bubble1");
      // Loop through each element
      for (let i = 0; i < containers.length; i++) {
        var text = containers[i].textContent;

        // Regular expression to match URLs
        var urlRegex = /(https?:\/\/[^\s.]+\.[^\s]+)/g;

        // Replace URLs with anchor tags
        var replacedText = text.replace(urlRegex, function (url) {
          // If URL ends with a period, remove it
          if (url.endsWith(".")) {
            url = url.slice(0, -1);
          }
          return '<a href="' + url + '" target="_blank">' + url + "</a>";
        });

        // Update the HTML of the element with the replaced text
        containers[i].innerHTML = replacedText;
      }
      element.appendChild(timestamp); // Append the timestamp after the message is typed
      scrollToLatestMessage();
    }
  }

  typeChar();
}
// ended

// Function to simulate live typing
function liveTypeMessage(element, message, timestamp) {
  let i = 0;
  const typingSpeed = 50; // milliseconds

  function typeChar() {
    if (i < message.length) {
      element.textContent += message.charAt(i);
      i++;
      scrollToLatestMessage();
      setTimeout(typeChar, typingSpeed);
    } else {
      element.appendChild(timestamp); // Append the timestamp after the message is typed
      scrollToLatestMessage();
      isSendMsg = false;
    }
  }

  typeChar();
}

// Function to create a timestamp span
function createTimestamp() {
  const timestamp = document.createElement("span");
  const now = new Date();
  const timeString =
    now.getHours().toString().padStart(2, "0") +
    ":" +
    now.getMinutes().toString().padStart(2, "0");
  timestamp.textContent = timeString;
  timestamp.classList.add("timestamp");
  return { timestamp, timeString };
}

// Function to clear the user input field
function clearUserInput() {
  document.querySelector(".userinput").value = "";
}

var isSendMsg = false;

// Event listener for the submit button
document
  .querySelector(".sendbutton")
  .addEventListener("click", function (e) {
    e.preventDefault();
    if (isSendMsg) return;
    else {
      isSendMsg = true;
      document.activeElement.blur();
      const inputElement = document.querySelector(".sendbutton")?.blur();
      const userMessage = document
        .querySelector(".userinput")
        .value.trim(); // Trim the input
      if (userMessage.length >= 2) {
        // Check if the message has at least 2 characters
        displayChatBubble("user", userMessage);
        postMessageToAPI(userMessage);
        clearUserInput();
        scrollToLatestMessage();
      }
    }
  });

// Displaying the welcome message when the chat window loads
window.onload = async function () {
  const signInUpBtn = document.querySelector(
    ".invite-friend.signin.w-button"
  );
  const signInOutBtn = document.querySelector(
    ".invite-friend.signin.signout.w-button"
  );
  var firstUserId = getCookie("userId");
  if (firstUserId) {
    signInUpBtn.style.display = "none";
    signInOutBtn.style.display = "block";
  } else {
    signInOutBtn.style.display = "none";
    signInUpBtn.style.display = "block";
  }

  // logout logic
  function clearAllCookies() {
    return new Promise((resolve, reject) => {
      var cookies = document.cookie.split(";");

      for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        var eqPos = cookie.indexOf("=");
        var name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;
        document.cookie =
          name +
          "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=" +
          window.location.hostname;
      }

      resolve(); // Resolve the promise once all cookies are cleared
    });
  }

  signInOutBtn.addEventListener("click", () => {
    clearAllCookies().then(() => {
      window.location.href = "/";
    });
  });
  const image = document.querySelector("#image-container img");
  const imageMob = document.querySelector(".div-block-14.mob img");
  image.srcset =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
  imageMob.srcset =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65df6f87bee691b1944db531_heardSomething.gif";
  const inputElement = document.querySelector(".userinput");
  inputElement.style.cssText =
    "overflow-x: hidden;white-space: pre-wrap;min-height: 20px; max-height: 150px; overflow-y: auto;height:unset;";
  const textAreaElement = document.createElement("textarea");
  // Copy over attributes from the input to the textarea
  textAreaElement.className = inputElement.className;
  textAreaElement.id = inputElement.id;
  textAreaElement.name = inputElement.name;
  textAreaElement.placeholder = inputElement.placeholder;
  textAreaElement.required = inputElement.required;
  textAreaElement.maxLength = inputElement.maxLength;
  // Replace the input element with the textarea element in the DOM
  inputElement.parentNode.replaceChild(textAreaElement, inputElement);

  // animation
  var textarea = document.querySelector(".userinput.w-input");
  textarea.style.cssText = "width:100%;padding:15px 5px 5px 15px;";
  let parentForMaxCharacter = document.querySelector(
    ".column-5.w-col.w-col-1"
  );
  let charSpan = document.createElement("span");
  charSpan.classList.add("max_char");
  charSpan.style.cssText =
    "color:red; font-size:12px;position: absolute;";
  parentForMaxCharacter.appendChild(charSpan);
  textarea?.addEventListener("input", (e) => {
    var remaining = 256 - e.target.value.length;
    charSpan.textContent = remaining + "/256 left";
    const check = checkMessage(e.target.value);
  });

  // Event listener for Enter key press in the chat input field
  document
    .querySelector(".userinput.w-input")
    .addEventListener("keydown", function (event) {
      if (event.keyCode === 13 && !isSendMsg) {
        event.preventDefault();
        isSendMsg = true;
        document.activeElement.blur();
        const inputElement = document
          .querySelector(".sendbutton")
          ?.blur();
        scrollToLatestMessage();
        const userMessage = event.target.value.trim(); // Trim the input
        if (userMessage.length >= 2) {
          // Check if the message has at least 2 characters
          displayChatBubble("user", userMessage);
          postMessageToAPI(userMessage);
          clearUserInput();
        }
      } else return;
    });

  if (firstUserId) {
    // started
    const chatContainer = document.querySelector(".chat-container");
    const bubble = document.createElement("div");
    bubble.classList.add("chat-bubble1");
    bubble.classList.add("bot");
    bubble.classList.add("bubble");
    bubble.style.width = "100%";
    bubble.style.justifyContent = "center";
    bubble.style.alignItems = "center";
    bubble.style.display = "flex";
    const image = document.createElement("img");
    image.src =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65caaf100d2e9c6e6c2df009_bubble.svg";
    image.style.marginBottom = "2px";
    image.style.width = "30px";
    image.style.bottom = "unset";
    image.style.left = "unset";
    chatContainer.style.marginBottom = "5px";
    bubble.textContent += "Loading";

    bubble.appendChild(image);
    chatContainer.appendChild(bubble);
    await conversationFromDb((data) => {
      if (data?.length === 0) {
        displayChatBubble(
          "bot",
          "Hi, I'm PawPal, your virtual friend. What's your name?"
        );
      }
      bubble.remove();
      scrollToLatestMessage();
    });
  } else {
    displayChatBubble(
      "bot",
      "Hi, I'm PawPal, your virtual friend. What's your name?"
    );
  }
};
</script>