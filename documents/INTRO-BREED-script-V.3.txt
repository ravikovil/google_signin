
  // List of links to choose from
var linksArray = [
  "https://www.pawpal.ai/demo-v-2-breeds/bernedoodle-demo-v-2",
  "https://www.pawpal.ai/demo-v-2-breeds/english-springer-spaniel-demo-v-2",
  "https://www.pawpal.ai/demo-v-2-breeds/dalmatian-demo-v-2",
  "https://www.pawpal.ai/demo-v-2-breeds/german-shepherd-demo-v-2",
  "https://www.pawpal.ai/demo-v-2-breeds/golden-retriever-demo-v-3",
  "https://www.pawpal.ai/demo-v-2-breeds/rottweiler-demo-v-2",
];

// Function to pick a random link
function pickRandomLink() {
  var randomIndex = Math.floor(Math.random() * linksArray.length);
  var randomLink = linksArray[randomIndex];
  window.open(randomLink, '_blank'); // Redirects to the random link
}

// Add event listener to the button
document.addEventListener("DOMContentLoaded", function () {
  var randomButton = document.getElementById("randomButton"); // Make sure to assign the correct ID to your button
  if (randomButton) {
    randomButton.addEventListener("click", pickRandomLink);
  }
});
// store conversation
function insertMsg(data) {
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");
  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: data,
    redirect: "follow",
  };

  fetch("https://api.pawpal.ai/api/v1/chat", requestOptions)
    .then((response) => response.text())
    .then((result) => {
      return;
    })
    .catch((error) => {
      throw error;
    });
}
// get login details
function getCookie(name) {
  const cookieValue = document.cookie.match(
    "(^|;)\\s*" + name + "\\s*=\\s*([^;]+)"
  );
  return cookieValue ? cookieValue.pop() : "";
}

// get breed id
function breedId() {
  const url = window.location.href;
  const parts = url.split("/");
  const breed = parts[parts.length - 1].split(".")[0];
  return breed;
}

var firstUserId = getCookie("userId");
var secondUserId = breedId();

// get chat conversation
function msg(sender, message, timestamp) {
  // Get all chat-bubble1 elements
  const chatBubbles = document.querySelectorAll(".chat-bubble1");

  // Initialize variables to store the last text and time for both user and bot
  let lastUserText = null;
  let lastUserTime = null;
  let lastBotText = null;
  let lastBotTime = null;

  // Iterate over each chat bubble
  chatBubbles.forEach((chatBubble) => {
    // Get the text content from the chat bubble
    const textContent = chatBubble?.textContent.trim();

    // Get the timestamp content from the chat bubble
    const timestamp = chatBubble
      .querySelector(".timestamp")
      ?.textContent?.trim();

    // Determine if it's from user or bot
    if (chatBubble?.classList?.contains("user")) {
      // Update last user text and time
      lastUserText = textContent;
      lastUserTime = timestamp;
    } else if (chatBubble?.classList?.contains("bot")) {
      // Update last bot text and time
      lastBotText = textContent;
      lastBotTime = timestamp;
    }
  });

  let conversation = [
    {
      from: firstUserId,
      to: secondUserId,
      time: lastUserTime,
      message: lastUserText,
    },
    {
      from: secondUserId,
      to: firstUserId,
      time: timestamp,
      message: message,
    },
  ];
  // Output the last text and time for both user and bot
  const data = JSON.stringify({
    firstUserId: firstUserId,
    secondUserId: secondUserId,
    date: new Date(),
    chat: [...conversation],
  });

  insertMsg(data);
}

// Function to scroll to the bottom of the chat container
function scrollToLatestMessage(delay = 0) {
  const chatContainer = document.querySelector(".chat-container");
  // Delay scrolling slightly to account for the height change
  setTimeout(() => {
    chatContainer.scrollTop = chatContainer.scrollHeight;
    chatContainer.scrollIntoView({ block: "end" });
  }, delay);
}

// Function to generate random ID
function getRandomId() {
  return Math.random().toString(36).substring(2, 10);
}

// Generate on page load
const userId = getRandomId();

// Function to post user's message to API
async function postMessageToAPI(message) {
  const data = {
    "in-0": message,
    "in-1": `0 - What can you do: 

    1 - Updates and Announcements: 
    
    2 - Privacy and Security:
    
    3 - Account Creation: 
    
    4 - Login Assistance: 
    
    5 - Casual Conversation:`,
    user_id: userId,
    "text2audio-1": `<TEXT>`,
    "audio2text-0": `<VOICE>`,
    "txt2img-0": `https://oaidalleapiprodscus.blob.core.windows.net/private/org-Qa2wQTCEnL6vMUL8WvnrTIfA/user-N5SJf9jvGnGYLNHjpppZVBhI/img-vVJU2QtMxBzOC1diwUDlIIWE.png?st=2024-02-27T06%3A08%3A37Z&se=2024-02-27T08%3A08%3A37Z&sp=r&sv=2021-08-06&sr=b&rscd=inline&rsct=image/png&skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2024-02-27T06%3A44%3A37Z&ske=2024-02-28T06%3A44%3A37Z&sks=b&skv=2021-08-06&sig=6GxRXQPUDgjD4%2Bl8mpVmEBcxXyoW7ZjlrEyBpFFmwyo%3D`,
  };

  // For adding bubble when thinking bot by made ravi
  // started
  const chatContainer = document.querySelector(".chat-container");
  const bubble = document.createElement("div");
  bubble.classList.add("chat-bubble1");
  bubble.classList.add("bot");
  bubble.classList.add("bubble");
  const image = document.createElement("img");
  image.src =
    "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65caaf100d2e9c6e6c2df009_bubble.svg";
  image.style.marginBottom = "2px";
  image.style.width = "30px";
  image.style.bottom = "unset";
  image.style.left = "unset";
  chatContainer.style.marginBottom = "5px";
  // const imageBreed = document.querySelector("#image-container img");
  // imageBreed.srcset = "../../images/animation/thinking.gif";
  bubble.appendChild(image);
  chatContainer.appendChild(bubble);
  scrollToLatestMessage();
  // end

  const result = await query(data);
  console.log("result", result);
  if (result["out-2"]) {
    // remove bubble when get the result
    bubble.remove();
    // imageBreed.srcset = "../../images/animation/heardSomething.gif";
    displayChatBubble("bot", result["out-2"]);
  }
  scrollToLatestMessage();
}
async function query(data) {
  const response = await fetch(
    "https://www.stack-inference.com/run_deployed_flow?flow_id=65de8778571dcd59d6d396de&org=161f3dc5-7deb-41f0-85e3-fc72609b3876",          {
      headers: {
        Authorization: "Bearer 15568649-1cb0-4a53-9f27-1a8f8d4fa5bd",
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify(data),
    }
  );

  return await response.json();
}

// get data from db of user
function getOldData(callback) {
  const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");

  const raw = JSON.stringify({
    firstUserId: firstUserId,
    secondUserId: secondUserId,
  });

  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: raw,
    redirect: "follow",
  };

  fetch("https://api.pawpal.ai/api/v1/chat/list", requestOptions)
    .then((response) => response.text())
    .then((result) => {
      if (callback)
        callback(
          JSON.parse(result).result.length > 0
            ? JSON.parse(result).result[0].chat
            : []
        );
    })
    .catch((error) => console.error(error));
}
// create html conversation
async function conversationFromDb(callback) {
  getOldData(async (chatData) => {
    const chatContainer = document.querySelector(".chat-container");
    // Loop through the chat data
    chatData.forEach((chat) => {
      if (chat.from === firstUserId && chat.message) {
        const chatBubble = document.createElement("div");
        chatBubble.classList.add("chat-bubble1", "user");
        chatBubble.style.display = "flex";
        (chatBubble.style.flexDirection = "column"),
          (chatBubble.style.gap = "5px");
        const newMsg = chat.message.replace(chat.time, "").trim();
        const textSpan = document.createElement("span");
        textSpan.textContent = newMsg;
        chatBubble.appendChild(textSpan);

        const timestamp = document.createElement("span");
        timestamp.style.display = "flex";
        timestamp.style.justifyContent = "end";
        timestamp.textContent = chat.time;
        chatBubble.appendChild(timestamp);

        chatContainer.appendChild(chatBubble);
      } else if (chat.from === secondUserId && chat.message) {
        const chatBubble = document.createElement("div");
        chatBubble.classList.add("chat-bubble1", "bot");
        chatBubble.style.display = "flex";
        (chatBubble.style.flexDirection = "column"),
          (chatBubble.style.gap = "5px");

        const newMsg = chat.message.replace(chat.time, "").trim();
        const textSpan = document.createElement("span");
        textSpan.textContent = newMsg;
        chatBubble.appendChild(textSpan);

        const timestamp = document.createElement("span");
        timestamp.style.display = "flex";
        timestamp.style.justifyContent = "end";
        timestamp.textContent = chat.time;
        chatBubble.appendChild(timestamp);
        chatContainer.appendChild(chatBubble);
      }
    });
    await new Promise((resolve) => setTimeout(resolve, 0));
    if (callback) callback(chatData);
  });
}
// Function to display chat bubbles with live typing effect

async function displayChatBubble(sender, message) {
  const chatContainer = document.querySelector(".chat-container");
  const bubble = document.createElement("div");
  bubble.classList.add("chat-bubble1");
  const { timestamp, timeString } = createTimestamp(); // Create a timestamp for all messages

  if (sender === "user") {
    bubble.classList.add("user");
    bubble.innerHTML = message; // Display the message as is
    bubble.appendChild(timestamp); // Append the timestamp for user messages
    chatContainer.appendChild(bubble);
  } else if (sender === "bot") {
    if (firstUserId) {
      msg(sender, message, timeString);
    }
    bubble.classList.add("bot");
    chatContainer.appendChild(bubble);
    // Check if the message contains a link and replace it with an anchor tag
    // started
    // const linkPattern = /\[(.*?)\]\s?\((.*?)\)/;
    // if (linkPattern.test(message)) {
    //   const [fullMatch, linkText, linkUrl] = message.match(linkPattern);
    //   const linkElement = document.createElement("a");
    //   linkElement.href = linkUrl;
    //   linkElement.textContent = linkText;
    //   linkElement.target = "_blank"; // Open link in new tab
    //   message = message.replace(fullMatch, linkElement.outerHTML);
    //   liveTypeMessageWithLInk(bubble, message, timestamp);
    // } else {
      liveTypeMessage(bubble, message, timestamp); // Pass the timestamp to the typing effect function
    // }
    // end
  }
  scrollToLatestMessage();
}

// when bot return some link in result
// started
function liveTypeMessageWithLInk(element, message, timestamp) {
  let i = 0;
  const typingSpeed = 50; // milliseconds

  function typeChar() {
    scrollToLatestMessage();
    if (i < message.length) {
      if (message.charAt(i) === "<") {
        // Check if the current character is part of an HTML tag
        let endIndex = message.indexOf(">", i); // Find the closing bracket of the tag
        if (endIndex !== -1) {
          element.innerHTML += message.substring(i, endIndex + 1);
          i = endIndex + 1; // Move the index to after the closing bracket
        } else {
          // If closing bracket not found, treat it as a regular character
          element.innerHTML += message.charAt(i);
          i++;
        }
      } else {
        element.innerHTML += message.charAt(i);
        i++;
      }
      scrollToLatestMessage();

      setTimeout(typeChar, typingSpeed);
    } else {
      var containers = document.getElementsByClassName("chat-bubble1");
      // Loop through each element
      for (let i = 0; i < containers.length; i++) {
        var text = containers[i].textContent;

        // Regular expression to match URLs
        var urlRegex = /(https?:\/\/[^\s.]+\.[^\s]+)/g;

        // Replace URLs with anchor tags
        var replacedText = text.replace(urlRegex, function (url) {
          // If URL ends with a period, remove it
          if (url.endsWith(".")) {
            url = url.slice(0, -1);
          }
          return '<a href="' + url + '" target="_blank">' + url + "</a>";
        });

        // Update the HTML of the element with the replaced text
        containers[i].innerHTML = replacedText;
      }
      element.appendChild(timestamp); // Append the timestamp after the message is typed
      scrollToLatestMessage();
    }
  }

  typeChar();
}
// ended

// extract login signup link

      function appendLinkToChatBubble(message) {
        const url = message.match(/https?:\/\/\S+/)[0];
        const trimmedUrl = url.endsWith(".") ? url.slice(0, -1) : url;

        // Replace the URL with an anchor tag
        const messageWithLink = message.replace(
          url,
          `<a href="${trimmedUrl}" target="_blank">${trimmedUrl}</a>`
        );

        return messageWithLink;
      }

// Function to simulate live typing
function liveTypeMessage(element, message, timestamp) {
  let i = 0;
  const typingSpeed = 50; // milliseconds
  const urlRegex = /(https?:\/\/[^ ]*(log-in|sign-up)[^ ]*)/gi;

  function typeChar() {
    if (i < message.length) {
      element.textContent += message.charAt(i);
      i++;
      scrollToLatestMessage();
      setTimeout(typeChar, typingSpeed);
    } else {
      element.appendChild(timestamp); // Append the timestamp after the message is typed
      if (urlRegex.test(message)) {
        element.textContent = "";
        element.innerHTML = appendLinkToChatBubble(message); // Append the timestamp after the message is typed

        console.log("link present", appendLinkToChatBubble(message));
      }
      scrollToLatestMessage();
    }
  }

  typeChar();
}

// Function to create a timestamp span
function createTimestamp() {
  const timestamp = document.createElement("span");
  const now = new Date();
  const timeString =
    now.getHours().toString().padStart(2, "0") +
    ":" +
    now.getMinutes().toString().padStart(2, "0");
  timestamp.textContent = timeString;
  timestamp.classList.add("timestamp");
  return { timestamp, timeString };
}

// Function to clear the user input field
function clearUserInput() {
  document.querySelector(".userinput").value = "";
}

// Event listener for the submit button
document
  .querySelector(".sendbutton")
  .addEventListener("click", function (e) {
    e.preventDefault();
    document.activeElement.blur();
    const inputElement = document.querySelector(".sendbutton")?.blur();
    const userMessage = document.querySelector(".userinput").value.trim(); // Trim the input
    if (userMessage.length >= 2) {
      // Check if the message has at least 2 characters
      displayChatBubble("user", userMessage);
      postMessageToAPI(userMessage);
      clearUserInput();
      scrollToLatestMessage();
    }
  });

// Displaying the welcome message when the chat window loads
window.onload = async function () {
  // const image = document.querySelector("#image-container img");
  // const imageMob = document.querySelector(".div-block-14.mob img");
  // image.srcset="../../images/animation/heardSomething.gif";
  // imageMob.srcset="../../images/animation/heardSomething.gif";
  const parentDivInput = document.querySelector("div.columns-2.w-row");
  parentDivInput.style.overflow = "hidden";
  const inputElement = document.querySelector(".userinput");
  inputElement.style.cssText =
    "overflow-x: hidden;white-space: pre-wrap;min-height: 20px; max-height: 150px; overflow-y: auto;height:unset;";
  const textAreaElement = document.createElement("textarea");
  // Copy over attributes from the input to the textarea
  textAreaElement.className = inputElement.className;
  textAreaElement.id = inputElement.id;
  textAreaElement.name = inputElement.name;
  textAreaElement.placeholder = inputElement.placeholder;
  textAreaElement.required = inputElement.required;
  textAreaElement.maxLength = inputElement.maxLength;
  // Replace the input element with the textarea element in the DOM
  inputElement.parentNode.replaceChild(textAreaElement, inputElement);

  // animation
  var textarea = document.querySelector(".userinput.w-input");
  textarea?.addEventListener("input", (e) => {
    // const check = checkMessage(e.target.value);
  });

  // Event listener for Enter key press in the chat input field
  document
    .querySelector(".userinput.w-input")
    .addEventListener("keydown", function (event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        document.activeElement.blur();
        const inputElement = document
          .querySelector(".sendbutton")
          ?.blur();
        scrollToLatestMessage();
        const userMessage = event.target.value.trim(); // Trim the input
        if (userMessage.length >= 2) {
          // Check if the message has at least 2 characters
          displayChatBubble("user", userMessage);
          postMessageToAPI(userMessage);
          clearUserInput();
        }
      }
    });

  if (firstUserId) {
    // started
    const chatContainer = document.querySelector(".chat-container");
    const bubble = document.createElement("div");
    bubble.classList.add("chat-bubble1");
    bubble.classList.add("bot");
    bubble.classList.add("bubble");
    bubble.style.width = "100%";
    bubble.style.justifyContent = "center";
    bubble.style.alignItems = "center";
    bubble.style.display = "flex";
    const image = document.createElement("img");
    image.src =
      "https://uploads-ssl.webflow.com/651a1e741b97af0938ef7dd5/65caaf100d2e9c6e6c2df009_bubble.svg";
    image.style.marginBottom = "2px";
    image.style.width = "30px";
    image.style.bottom = "unset";
    image.style.left = "unset";
    chatContainer.style.marginBottom = "5px";
    bubble.textContent += "Loading";

    bubble.appendChild(image);
    chatContainer.appendChild(bubble);
    await conversationFromDb((data) => {
      if (data?.length === 0) {
        displayChatBubble(
          "bot",
          " Welcome to PawPal, Your virtual friend. We are glad to have you here. I’m here to guide you through your first time experience with Pawpal. Start off by asking me 'what can you do' "
        );
      }
      bubble.remove();
      scrollToLatestMessage();
    });
  } else {
    displayChatBubble(
      "bot",
      " Welcome to PawPal, Your virtual friend. We are glad to have you here. I’m here to guide you through your first time experience with Pawpal. Start off by asking me 'what can you do' "
    );
  }
  const textareas = document.querySelectorAll(
    "textarea.w-input, textarea.w-select"
  );

  // Loop through each textarea element
  textareas.forEach((textarea) => {
    // Remove the 'height' CSS property
    textarea.style.removeProperty("height");
  });
};
